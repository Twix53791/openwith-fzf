#!/bin/bash

# TIPS : Check all file extensions in a dir and subdirs:
#		for file in $(find); do echo "${file##*\.}";done
#		l='';for f in $(find); do e=$(echo "${f##*\.}");[[ $(echo ${#e}) -lt 7 ]] && t=$e;[[ "$l" != *"$t"* ]] && echo "$t | $f";l+="$t "; done
#		BUT if the file has no ext, it returns its name...

# TIPS : echo all file types in a dir and subdirsÂ¬:
#		l='';for f in $(find); do t=$(file -Lb --mime-type "$f" | cut -d' ' -f1);[[ "$l" != *"$t"* ]] && echo "$t | $f";l+="$t "; done

#### Settings =============================================

 ## Set this value to a max, to avoid executing file command
  #  on large number of files, slowing the all process.
  # Setting it to 0 disables the "deep check" completely
  # maxargs have to be higher or equal to make it effective
maxdeepcheck=50

 ## To avoid any CPU bolting
maxargs=100

 ## Set alphabetic sort
alphsort=1

 ## Warning messages file location
logfile="/tmp/openwithlog"
touch $logfile

 ## Enable files count/warning messages fzf preview display
warningmsg=1
filescount=1

 ## Files counts color
export OWFCOLOR="\e[35m"

 ## Set the fzf default options
  # In my case, there are set in bashrc
source /home/archx/.bashrc
#export FZF_DEFAULT_OPTS='your settings'

#### List of applications
 # 	(not necessary, but well to visualize here all app variables)

at=0	# atom
da=0	# darktable
em=0	# emacs
fir=0 # firefox
fo=0	# fontmatrix
gi=0	# gimp
li=0	# litemdview
lo=0	# libreoffice
na=0	# nano
no=0	# nomacs
za=0	# zathura
si=0	# sioyek
vl=0	# vlc

#=============== FUNCTIONS ===================================

_deepcheck (){
	n=0
	for file in "$@"; do
		mime=$(file -Lb --mime-type "$file")
		mtype=${mime%%/*}
		ftype=${mime##*/}

		case $ftype in
						pdf) em=1 && za=1 && si=1 && fir=1;;
					  epub) za=1;;
				 vnd.djvu) za=1;;
 	vnd.djvu+multipage) za=1;;
					   ogg) vlc=1;;
			   mpeg4-iod) vlc=1;;
	mpeg4-muxcodetable) vlc=1;;
	vnd.openxmlformats-officedocument.wordprocessingml.document) lo=1 && em=1;;
	vnd.oasis.opendocument.text) lo=1 && em=1;;
	vnd.oasis.opendocument.text-template) lo=1;;
	vnd.oasis.opendocument.presentation) lo=1 && em=1;;
 	vnd.openxmlformats-officedocument.spreadsheetml.sheet) lo=1 && em=1;;
		 	vnd.ms-excel) lo=1 && em=1;;
					msword) lo=1 && em=1;;
		 			 excel) lo=1;;
		 		  msexcel) lo=1;;
		 	mspowerpoint) lo=1;;
						rtf) lo=1;;
						ppt) em=1;;
						csv) lo=1 && em=1;;
					 plain) lo=1 && na=1 && em=1;;
					  json) fi=1 && em=1 && at=1 && lo=1 && na=1;;
		 				  *) ftype=0;;
		esac

		if [[ $ftype == 0 ]];then
			case $mtype in
				 image) da=1 && gi=1 && no=1;;
		 application) na=1 && lo=1 && em=1;;
		 		  text) na=1 && em=1 && at=1 && lo=1;;
			esac
		fi

	# Check if there are differents file types
		if [[ -z $ext ]]; then
			ext=$ftype
		elif [[ $ext != 1 ]]; then
			[[ "$ext" != "$ftype" ]] && ext=1
		fi
		
	# Exit when reach the maxdeepcheck variable
		((n++))
		[[ $n -ge $maxdeepcheck ]] && break
	done
}

_extcheck (){
	fcount=0
	for file in "${@:1:${maxargs}}";do
		if [[ -f $file ]]; then
			((fcount++))

		# Checks if there are different files types
			fname="${file##*/}"
			if [[ "$fname" == *.* ]]; then
				if [[ -z $ext ]]; then
					match="${fname##*.}"
					[[ ${#match} -le 5 ]] && ext=$match
				elif [[ $ext != 1 ]]; then
					[[ "$ext" != "${fname##*\.}" ]] && ext=1
				fi
			fi
		# Set the applist according to the file extensions finded

			### Main used files on my desktop ###
			  if [[ $file == *.pdf ]];then 	em=1 && za=1 && si=1
			elif [[ $file == *.jpg ]];then 	em=1 && da=1 && gi=1 && no=1
			elif [[ $file == *.png ]];then 	em=1 && da=1 && gi=1 && no=1
			elif [[ $file == *.NEF ]];then 	da=1 && no=1
			elif [[ $file == *.mp4 ]];then 	vl=1
			elif [[ $file == *.svg ]];then 	em=1 && gi=1 && no=1

			elif [[ $file == *.md ]];then 	em=1 && lo=1 && at=1 && na=1 &&
														li=1
			elif [[ $file == *.txt ]];then 	em=1 && na=1 && at=1 && lo=1

			elif [[ $file == *.sh ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.zsh ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.py ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.html ]];then 	em=1 && na=1 && at=1 && lo=1 &&
														fir=1
			elif [[ $file == *.djvu ]];then 	za=1
			elif [[ $file == *.cbz ]];then 	za=1
			elif [[ $file == *.cbr ]];then 	za=1
			elif [[ $file == *.odt ]];then 	em=1 && lo=1
			elif [[ $file == *.doc ]];then 	em=1 && lo=1
			elif [[ $file == *.docx ]];then 	em=1 && lo=1
			### rare text/code files ###
			elif [[ $file == *.xml ]];then 	em=1 && na=1 && at=1 && lo=1 &&
														fir=1
			elif [[ $file == *.log ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.ini ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.yml ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.yaml ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.conf ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.toml ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.backup ]];then 	em=1 && na=1 && at=1 && lo=1
			elif [[ $file == *.config ]];then 	em=1 && na=1 && at=1 && lo=1
			### rare image files ###
			elif [[ $file == *.jpeg ]];then 	em=1 && da=1 && gi=1 && no=1
			elif [[ $file == *.gif ]];then 	gi=1 && no=1
			elif [[ $file == *.ico ]];then 	gi=1 && no=1 && da=1 && em=1
			elif [[ $file == *.raf ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.rw2 ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.bmp ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.dng ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.jps ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.jpe ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.nrw ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.orf ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.pam ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.pbm ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.pcd ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.pef ]];then 	gi=1 && no=1 && da=1
			elif [[ $file == *.xcf ]];then 	gi=1
			elif [[ $file == *.webp ]];then 	gi=1
			elif [[ $file == *.jp2 ]];then 	gi=1
			elif [[ $file == *.dds ]];then 	gi=1 && notify-send dds
			elif [[ $file == *.fts ]];then 	gi=1
			elif [[ $file == *.heif ]];then 	gi=1
			elif [[ $file == *.ras ]];then 	gi=1
			elif [[ $file == *.sgi ]];then 	gi=1
			elif [[ $file == *.xbm ]];then 	gi=1
			elif [[ $file == *.xwd ]];then 	gi=1
			elif [[ $file == *.heic ]];then 	gi=1 && da=1
			elif [[ $file == *.exr ]];then 	gi=1 && da=1
			elif [[ $file == *.tiff ]];then 	gi=1 && da=1
			elif [[ $file == *.pfm ]];then 	gi=1 && da=1
			elif [[ $file == *.hdr ]];then 	gi=1 && da=1
			elif [[ $file == *.erf ]];then 	da=1
			elif [[ $file == *.mng ]];then 	da=1
			elif [[ $file == *.x3f ]];then 	da=1
			elif [[ $file == *.cr2 ]];then 	da=1
			### If all test failed - unknown (and execute deep check) ###
			else unknownlist+=("$file")
			fi
			args+=("$file")
		elif [[ -d $f ]] && [[ -z $dir ]]; then
         echo "WARNING : a directory is selected!\n" >> $logfile
         dir=1
		fi
	done
}

#### Set the apps list ###
 # The order is important, as it will set the order of the fzf menu
 #  but if "alphabetic sort" is used
 # Footer is a fixed list always display at the end ot the fzf menu

_applist(){

	[[ $gi = 1 ]] && applist+="gimp\n"
	[[ $da = 1 ]] && applist+="darktable\n"
	[[ $vl = 1 ]] && applist+="vlc\n"
	[[ $em = 1 ]] && applist+="emacs\n"
	[[ $at = 1 ]] && applist+="atom\n"
	[[ $lo = 1 ]] && applist+="libreoffice\n"
	[[ $si = 1 ]] && applist+="sioyek\n"
	[[ $za = 1 ]] && applist+="zathura\n"
	[[ $fir = 1 ]] && applist+="firefox\n"
	[[ $no = 1 ]] && applist+="nomacs\n"
	[[ $li = 1 ]] && appalist+="litemdview\n"
	[[ $fo = 1 ]] && applist+="fontmatrix\n"
	[[ $na = 1 ]] && applist+="nano\n"

	footer="\ndragon-drop"
}

#=============== SCRIPT =========================================

trap 'rm $logfile' EXIT

_extcheck "$@"

[[ -z $args ]] && echo "File(s) not found. Is the filename valid?" &&
	exit
[[ ! -z $unknownlist ]] && [[ $maxdeepcheck != 0 ]] &&
	_deepcheck "${unknownlist[@]}"

_applist

#### Sorting ###
	if [[ $alphsort = 1 ]];then
		fzflist="$(echo -en "$applist" | sort)$(echo -en "$footer")"
	else
		fzflist="$(echo -en "$applist")$(echo -en "$footer")"
	fi

#### Warning if multiple file types
	if [[ $ext == 1 ]]; then
	   echo "WARNING : multiple file types." >> $logfile
	   echo "Opening in an application an unsupported file type could create an error" >> $logfile
	fi

	[[ $filescount = 1 ]] && export OWCOUNT=" files : $fcount"
	[[ $warningmsg = 1 ]] && export OWLOGFILE=$logfile

#### Fzf menu ###
	if [[ $warningmsg = 1 ]] && [[ ! -z $(cat $logfile) ]] || [[ $filescount = 1 ]]; then
		output=$(echo -en "$fzflist" | fzf \
		      --preview 'echo -e "$OWFCOLOR$OWCOUNT\e[0m"; cat $OWLOGFILE' \
		      --color='preview-fg:160' --preview-window="60%:wrap")
	else
		output=$(echo -en "$fzflist" | fzf)
	fi
	[[ -z $output ]] && exit

 # Possible fzf options, if not configured by default with FZF_DEFAULT_OPTS (cf. man fzf):
 #		fzf --reverse +m --color hl+:160 --bind 'tab:abort,shift-right:select'

#### Open the files selected ###
 # I use here my own script,
 #	 but you can use your own
 # NOTE : if the app opens in the terminal, use & to run
 #	 the script in the background seems buggy (CPU freeze)

	if [[ "$output" == "nano" ]]; then
		openrule - kitty -e $output "${args[@]}"
	else
		openrule d $output "${args[@]}" &
	fi


#============================================================
# opening script examples:
 ## simply opens all in the app selected
#$output "${args[@]}"

 ## Recursive opening (risk to create many different windows,
  #  but necessary with some applications)
#for file in "${args[@]}"; do1
#	$output "$file" &
#done
